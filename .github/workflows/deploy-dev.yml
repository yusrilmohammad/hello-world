# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - dev

env:
  AWS_REGION: ap-southeast-1                          # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: test-image                          # set this to your Amazon ECR repository name
  ECS_SERVICE: test-service                           # set this to your Amazon ECS service name
  ECS_CLUSTER: grouu                                  # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition-dev.json  # set this to the path to your Amazon ECS task definition
                                                      # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: test-service                        # set this to the name of the container in the
                                                      # containerDefinitions section of your task definition
  PORT: 3000

  IMAGE_REGISTRY  : 088074866799.dkr.ecr.ap-southeast-1.amazonaws.com

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets to json
        shell: bash
        run: | 
          SECRETS=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.SECRETS_MANAGER_ARN }} --version-stage AWSCURRENT --region ${{ env.AWS_REGION }} --query SecretString --output text)
          for s in $(echo $SECRETS | jq -r "to_entries|map(\"\(.key)=\(.value|tostring)\")|.[]" ); do
              echo $s >> .env
          done

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.IMAGE_REGISTRY }}
          docker build -t ${{ env.IMAGE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker push ${{ env.IMAGE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=${{ env.IMAGE_REGISTRY }}/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.3
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
